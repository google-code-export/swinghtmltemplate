#summary Details on how use <ui:component> tag
#labels usage

We want to display a grid of person list with textfields, binded to the person properties.

[http://swinghtmltemplate.googlecode.com/files/Test%20component%20tag%201.png]


We start with controller. It contains the model with a collection of `Person`. `Person` is a javabean
with properties `name` and `phone`. We fill the collection in the controller constructor and never change it.

{{{
package ru.swing.html.example.component;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdom.JDOMException;
import ru.swing.html.Binder;
import ru.swing.html.DomModel;
import ru.swing.html.ModelElement;

import javax.swing.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Test &lt;component> tag
 */
public class PersonsForm extends JFrame {

    @ModelElement("model")
    private Model model = new Model();

    private DomModel domModel;

    private Log logger = LogFactory.getLog(getClass());

    public PersonsForm() throws JDOMException, IOException {
        model.getPersons().add(new Person("Bill", "1-123-00"));
        model.getPersons().add(new Person("Mary", "1-123-01"));
        model.getPersons().add(new Person("Mike", "1-123-02"));
        model.getPersons().add(new Person("Nina", "1-123-03"));
        model.getPersons().add(new Person("Jane", "1-123-04"));
        DomModel model = Binder.bind(this, true);
        this.domModel = model;
    }


    public static void main(String[] args) throws JDOMException, IOException {
        final PersonsForm personsForm = new PersonsForm();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                personsForm.setVisible(true);
            }
        });
    }

    public void dump() {
        for (Person person : model.getPersons()) {
            logger.info(person.getName()+" - "+person.getPhone());
        }
        logger.info(domModel.dump());
    }


    public Model getModel() {
        return model;
    }

    public void setModel(Model model) {
        this.model = model;
    }

    public class Model {
        private List<Person> persons = new ArrayList<Person>();

        public List<Person> getPersons() {
            return persons;
        }

        public void setPersons(List<Person> persons) {
            this.persons = persons;
        }
    }

    public class Person {

        private PropertyChangeSupport pcs = new PropertyChangeSupport(this);
        private String name;
        private String phone;

        private Person() {
        }

        private Person(String name, String phone) {
            this.name = name;
            this.phone = phone;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            String old = this.name;
            this.name = name;
            pcs.firePropertyChange("name", old, name);
        }

        public String getPhone() {
            return phone;
        }

        public void setPhone(String phone) {
            String old = this.phone;
            this.phone = phone;
            pcs.firePropertyChange("phone", old, phone);
        }

        public void addPropertyChangeListener(PropertyChangeListener listener) {
            pcs.addPropertyChangeListener(listener);
        }

        public void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) {
            pcs.addPropertyChangeListener(propertyName, listener);
        }
    }

}

}}}

No let's create the component, which will display each person. We will use `<ui:component>` in our main
html document and pass the person as model element with the `person` name.


`/ru/swing/html/example/PersonsPanel.html`
{{{
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
</head>
<body>
    <table style="max-height:150;">
        <tr>
            <td rowspan="2">
                <img src="unknown-person.png" alt=""/>
            </td>
            <td><p>Name:</p></td>
            <td width="fill"><input type='text' value="${person.name}"/></td>
        </tr>
        <tr>
            <td><p>Phone:</p></td>
            <td><input type='text' value="${person.phone}" size="10"/></td>
        </tr>
        <tr>
            <td colspan="3">
                <hr type='horizontal' align="bottom"/>
            </td>
        </tr>
    </table>

</body>
</html>
}}}
This is a panel with 3 cells. Left cell show default picture, right cells show textfields binded to `name` and `phone`
properties.

Now let's create main html:


`/ru/swing/html/example/PersonsForm.html`
{{{
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<html xmlns:j="http://www.oracle.com/swing"
      xmlns:ui='http://swinghtmltemplate.googlecode.com/ui'>
<head>
    <title>Test component tag</title>
    <meta name="display-as" content="frame"/>
    <meta name="size" content="640 480"/>
    <meta name="onclose" content="exit"/>

</head>
<body style="display:border;border: empty 12 12 12 12;">

<j:scroll>
    <div style="display:box;x-boxlayout-direction: vertical;">
        <ui:forEach items='${model.persons}' var='person' varStatus='i'>
            <ui:component src='/ru/swing/html/example/component/PersonPanel.html' person="${person}"/>
            <ui:if test='${not i.last}'>
                <j:strut height='30'/>
            </ui:if>
        </ui:forEach>
        <j:glue/>
    </div>
</j:scroll>

<div align="bottom" style="display:flow">
    <input type="button" text="dump" onclick="dump"/>
</div>

</body>
</html>
}}}


We insert person panel with `<ui:component>`. The `src` attribute points to our `PersonsPanel.html` and all other
attributes are passed as model elements to the target document. That is why we use `person` in `PersonsPanel.html`.
We also insert strut between panels but not after the last panel. We use `varStatus` variable to check that.

Take an attention that we set `max-height` to the PersonsPanel table. This fixes the swing bug when panels placed
in box layout fill all the space even if glue is presented.

In the bottom of our form we place button to track the binding. Change values in the form and hit the button. Model
values will be printed to the log.
